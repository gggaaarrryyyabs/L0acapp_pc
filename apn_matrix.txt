
//load "C:/Users/shiyanshi/OneDrive/homework_tex/apn_matrix.txt";

//ChangeDirectory("C:/Users/livkle344/Downloads/Compressed/Magma");
ChangeDirectory("C:/Users/shiyanshi/Downloads/Magma");
m:=3;
q:=2^m;
n:=2*m;
F<v>:=FiniteField(2^n);
Fsub<w>:=FiniteField(2^m);
V:=VectorSpace(FiniteField(2),n);
Field:=[0] cat [v^i:i in [1..2^n-1]];
P<x>:=PolynomialRing(F);
Z:=IntegerRing();
initial:=[ 6, 15, 4, 6, 3, 9, 16, 9, 15, 14, 9];
//initial:=[ Log(Random(F))+1:i in [1..5]];
A:=Open("results2.txt","w");
for i in [1..#initial] do
    fprintf A,"%-2o,",initial[i];
end for;delete A;
K:=Split(Gets(Open("results2.txt","r")),",");
initial:=[StringToInteger(K[i]):i in [1..#K]];

coset:=[ 0, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 69, 71, 73, 75, 77, 79, 83, 85, 87, 89, 91, 93, 95, 99, 101, 103, 105, 107, 109, 111, 115, 117, 119, 121, 123, 125, 127, 147, 149, 151, 155, 157, 159, 165, 167, 171, 173, 175, 179, 181, 183, 187, 189, 191, 205, 207, 213, 215, 219, 221, 223, 231, 235, 237, 239, 245, 247, 251, 253, 255, 341, 343, 347, 351, 363, 367, 375, 379, 383, 439, 447, 479, 495, 511 ];


//quadrinomials:=func<x|x^3+a*(x^(2^s+1))^2^k+b*x^(3*2^m)+c*(x^(2^(s+m)+x^m))^2^k>;
//tracefunction:=func<x|a*Trace(b*x^3,Fsub)+a^q*Trace(c*x^(2^s+1),Fsub)>;


sbox:=\[20,  20,  19,  27,  22,  24,  30,  36,  24,  25,  31,  42,  46,  37,  38,  33,  22,  34,  29,  41,  38,  28,  32,  32,  32,  35,  19,  42,  30,  43,  36,  33,  28,  27,  26,  37,  32,  25,  21,  34,  32,  32,  30,  36,  38,  34,  35,  31,  42,  37,  42,  23,  38,  45,  33,  32,  38,  50,  36,  30,  28,  34,  25,  45,  28,  32,  31,  45,  35,  29,  39,  45,  42,  39,  31,  40,  33,  38,  37,  30,  36,  26,  35,  39,  17,  33,  29,  47,  38,  31,  27,  34,  41,  34,  41,  22,  23,  28,  35,  36,  28,  29,  19,  38,  31,  29,  39,  47,  34,  32,  31,  23,  49,  36,  49,  26,  36,  41,  33,  36,  41,  41,  35,  29,  30,  32,  23,  37,  19,  31,  28,  32,  20,  24,  24,  34,  23,  26,  22,  39,  38,  43,  42,  29,  35,  19,  28,  34,  20,  42,  24,  44,  29,  28,  34,  31,  42,  37,  44,  27,  38,  27,  28,  47,  35,  30,  36,  43,  26,  28,  30,  32,  49,  41,  42,  38,  46,  35,  44,  27,  27,  50,  38,  35,  32,  40,  32,  34,  27,  33,  22,  48,  47,  37,  42,  32,  45,  41,  51,  35,  41,  42,  46,  37,  21,  24,  33,  36,  35,  35,  32,  38,  43,  39,  41,  29,  37,  40,  42,  35,  25,  32,  31,  40,  39,  48,  45,  30,  39,  46,  40,  39,  43,  33,  41,  25,  37,  31,  26,  40,  43,  26,  25,  36,  27,  36,  24,  39,  29,  31,  31,  45,  31,  45,  32,  30,  31,  38,  38,  33,  39,  26,  25,  48,  23,  31,  30,  34,  29,  45,  45,  27,  24,  23,  37,  46,  34,  29,  38,  49,  20,  30,  29,  39,  40,  42,  30,  24,  32,  26,  28,  50,  18,  34,  33,  29,  28,  39,  40,  39,  38,  49,  39,  24,  31,  35,  43,  43,  35,  35,  44,  34,  39,  40,  33,  24,  29,  24,  30,  39,  31,  26,  28,  47,  22,  25,  34,  31,  31,  27,  18,  38,  36,  30,  34,  36,  34,  27,  33,  36,  35,  36,  31,  38,  36,  40,  25,  41,  35,  37,  45,  37,  33,  29,  29,  47,  28,  40,  35,  39,  25,  34,  41,  40,  40,  49,  35,  26,  34,  26,  44,  30,  41,  39,  42,  34,  50,  43,  38,  23,  23,  26,  34,  47,  33,  30,  20,  45,  26,  37,  34,  35,  35,  21,  20,  46,  50,  36,  40,  34,  24,  33,  29,  46,  33,  22,  29,  46,  26,  28,  39,  43,  49,  41,  37,  25,  33,  25,  27,  37,  34,  36,  35,  41,  27,  38,  35,  36,  30,  43,  37,  24,  36,  42,  28,  22,  51,  39,  30,  34,  36,  39,  46,  31,  39,  36,  28,  29,  31,  46,  44,  25,  37,  36,  39,  32,  33,  45,  44,  22,  21,  33,  35,  39,  48,  37,  41,  28,  44,  43,  38,  21,  40,  42,  41,  23,  26,  22,  34,  42,  46,  34,  40,  34,  32,  38,  41,  29,  44,  35,  42,  27,  32,  35,  31,  34,  37,  33,  25,  33,  37,  35,  30,  30,  21,  26,  37,  40,  41,  46,  36,  23,  20,  29,  29,  26,  29,  26,  29,  24,  32,  26,  33,  31,  43,  31,  29,  29,  35,  30,  26,  44,  40,  34,  33,  35,  29,  38,  21,  40,  29,  36,  34,  31,  23,  22,  20,  31,  25,  22,  27,  40,  26,  28,  35,  39,  36,  26,  26,  24,  51,  38,  42,  31,  27,  38,  37,  36,  38,  40,  37,  41,  26,  38,  28,  46,  30,  30,  34,  42,  31,  33,  34,  46,  41,  38,  27,  38,  34,  43,  37,  28,  30,  32,  34,  40,  25,  33,  26,  46,  39,  24,  35,  32,  36,  33,  43,  22,  20,  21,  27,  32,  23,  24,  25,  40,  37,  35,  34,  42,  36,  38,  38,  30,  38,  37,  37,  26,  37,  42,  35,  34,  35,  43,  36,  38,  26,  32,  32,  46,  22,  28,  30,  30,  19,  25,  22,  40,  19,  30,  25,  36,  36,  45,  47,  28,  36,  26,  30,  40,  29,  33,  24,  48,  37,  28,  33,  40,  48,  31,  35,  32,  30,  35,  35,  38,  29,  36,  31,  42,  25,  29,  26,  34,  38,  52,  46,  36,  40,  33,  43,  22,  41,  36,  33,  34,  37,  43,  38,  34,  24,  36,  32,  36,  48,  42,  46,  34,  42,  38,  45,  31,  47,  48,  41,  30,  21,  28,  28,  33,  40,  44,  30,  38,  40,  36,  39,  29,  41,  44,  35,  26,  23,  42,  26,  41,  39,  42,  40,  39,  45,  34,  49,  34,  34,  34,  31,  25,  34,  42,  38,  42,  29,  26,  40,  37,  25,  32,  29,  46,  26,  38,  19,  43,  40,  40,  38,  38,  39,  30,  29,  42,  29,  32,  30,  43,  30,  24,  22,  42,  36,  34,  37,  35,  28,  35,  34,  33,  36,  31,  23,  40,  33,  33,  19,  33,  37,  41,  42,  36,  29,  39,  32,  38,  33,  33,  29,  45,  32,  25,  27,  40,  40,  33,  38,  33,  40,  52,  33,  25,  44,  44,  34,  28,  31,  42,  48,  33,  37,  34,  29,  44,  21,  32,  35,  36,  34,  21,  29,  40,  24,  32,  28,  26,  29,  43,  42,  30,  20,  21,  38,  51,  31,  32,  30,  43,  31,  31,  41,  43,  42,  40,  41,  31,  22,  34,  39,  41,  31,  27,  23,  47,  29,  18,  24,  43,  38,  35,  36,  35,  45,  45,  30,  24,  36,  34,  34,  22,  32,  37,  35,  32,  33,  32,  29,  34,  22,  35,  32,  39,  33,  28,  32,  43,  31,  31,  31,  41,  40,  44,  45,  23,  25,  34,  21,  36,  36,  33,  29,  36,  32,  36,  30,  34,  33,  31,  44,  28,  23,  41,  34,  38,  32,  28,  32,  40,  38,  21,  25,  50,  43,  28,  35,  30,  40,  36,  49,  33,  29,  35,  45,  27,  41,  36,  32,  29,  24,  25,  30,  47,  44,  37,  30,  35,  32,  41,  49,  26,  43,  37,  41,  27,  29,  27,  24,  48,  39,  34,  45,  28,  29,  42,  44,  35,  30,  42,  40,  30,  38,  32,  31,  31,  28,  48,  37,  31,  42,  36,  42,  34,  41,  36,  38,  27,  31,  30,  25,  40,  25,  25,  32,  44,  23,  25,  29,  49,  40,  33,  21,  36,  36,  33,  42,  37];

for i in [1..1024] do
    

function isAPN(F,n)
    Field:=FiniteField(2,n);
	for a in Field do
		if a eq 0 then
			continue;
		end if;
		derivative_image := { F(x) + F(x+a) : x in Field };
		if #derivative_image ne 2^(n-1) then
			return false;
		end if;
	end for;
	return true;
end function;

function Walshcoef(F,a,b,n)
    tracecodomain:=[b*Evaluate(F,x)+a*x:x in FiniteField(2,n)];
    exp:=[Trace(FiniteField(2,n)!x):x in tracecodomain];
    exp:=[(x eq 0) select (Integers()!0) else (Integers()!1):x in exp];
    return &+[(-1)^x:x in exp];
end function;

function Sumfourvalues(F,s,n)
    return &+[(-1)^(Integers()!Trace(b*s))*Walshcoef(F,a,b,n):a in FiniteField(2,n),b in FiniteField(2,n)] div 2^(2*n);  
end function;

function WalshSpectrum(bfvalues,n)
    sum:=0;
    dif:=0;
    if Min(bfvalues) eq 0 then
        spec:=[(x eq 0) select (Integers()!1) else (Integers()!-1):x in bfvalues];
    end if;
    for Sz in [2^i:i in [0..n-1]] do
        for pos in [0..2^n-1 by 2*Sz] do
            for j in [0..Sz-1] do
                p:=pos+j;
                sum:=spec[p+1]+spec[p+1+Sz];
                dif:=spec[p+1]-spec[p+1+Sz];
                spec[p+1]:=sum;
                spec[p+1+Sz]:=dif;
            end for;
        end for;
    end for;
    return spec;
end function;

//function VWalshSpectrum(vbfvalues,n,m)
//    
//end function;


function OrthoTest(Function,n)
    F<v>:=FiniteField(2,n);
    W:=VectorSpace(GF(2),n);
    ortho:=[];
    for i in [0..2^n-2] do
        a:=v^i;
        linearspace:=[];
        for x in F do
            linearspace cat:=(Function(x)+Function(x+a)+Function(0)+Function(a) eq 0) select [0:i in [1..n]] else Eltseq(Function(x)+Function(x+a)+Function(0)+Function(a));
        end for;
        ortho cat:=Basis(NullspaceOfTranspose(Matrix(GF(2),2^n,n,linearspace)));
    end for;
    ortho cat:=[0*ortho[1]];
    functionG:=[];
    for j in [1..2^n-1] do
        for i in [1..2^n-1] do
            if W!Eltseq(v^i) eq ortho[j] then
                Append(~functionG,v^i);
                break;
            end if;
        end for;
    end for;
    Append(~functionG,0);
    function G(x)
        return (x eq 0) select 0 else (x eq 1 select 1 else functionG[Log(x)]); 
    end function;
    return G;
end function;


G:=OrthoTest(func<x|x^3>,n);
load "DifferentialUniformityExe.m";
ddtG:=DDTexe(G,n);
ddtGseq:=[ddtG[i][j]:i in [1..2],j in [1..Ncols(ddtG)]];


s:=3;
B:=Set(Field) diff Set([x^3:x in F]);
A:=[x:x in (Set(F) diff Set(Fsub))];
for aindex in [1..#A] do
    for b in B do 
    for c in F do 
    a:=A[aindex];
    if c*b^(-3) in Fsub then 
        originaltracefunction:=func<x|a*Trace(b*x^3,Fsub)+a^q*Trace(c*x^(2^s+1),Fsub)>;
        Original:=OrthoTest(originaltracefunction,n);
        ddtOriginal:=DDTexe(Original,n);
        ddtOriginalseq:=[ddtOriginal[i][j]:i in [1..2],j in [1..Ncols(ddtOriginal)]];
        for d in [v^i:i in [0..2^n-2]] do
            tracefunction:=func<x|a*Trace(b*x^3,Fsub)+a^q*Trace(c*x^(2^s+1),Fsub)+a^(q+1)*Trace(d*x^(2^s+2^m),Fsub)>;
            if isAPN(tracefunction,n) then 
                printf "function is APN when d=%o,a=%o,b=%o,c=%o\n", d,a,b,c;
                S:=OrthoTest(tracefunction,n);
                ddtS:=DDTexe(S,n);
                ddtSseq:=[ddtS[i][j]:i in [1..2],j in [1..Ncols(ddtS)]];
                if ddtSseq ne ddtOriginalseq and ddtSseq ne ddtGseq then
                    Write("results10.txt",[a,b,c,d]);
                    printf "The function is not ccz eq to x^3 and originaltracefunction when i=%o,a=%o,b=%o,c=%o\n", d,a,b,c;
                end if;
            end if;
        end for;
    end if;
    end for;
    end for;
end for;






/*

M:=[];
for i in [1..#initial-1] do
    M cat:=IntegerToSequence(i,2,n) cat Eltseq(v^(initial[i]-1));
end for;

weightgethree:=[x:x in [3..2^n-1]|Weight(V!IntegerToSequence(x,2,n)) ge 3];

//begin at the [v^4 F(v^4)];
//k is flag of all nodes where k[i] is the (i+4)-th [v^(i+4) F(v^(i+4))], when there is one i such that k[i]=0, end the whole program. 
j:=#initial;
impossiblek:={@  @};

function IsLessDegreeTwo(inputmatrix)
    xGraph:=ColumnSubmatrix(Matrix(#inputmatrix div (2*n),2*n,inputmatrix),n);
    fGraph:=ColumnSubmatrixRange(Matrix(#inputmatrix div (2*n),2*n,inputmatrix),n+1,2*n);
    for u in weightgethree do 
        if u le (#inputmatrix div (2*n)) then
            sum:=0*xGraph[1];
            for i in [1..u-1] do 
                if xGraph[i] le xGraph[u] then
                    sum+:=fGraph[i];
                end if;
            end for;
            if sum ne 0*xGraph[1] then 
                return false;
            end if;
        end if;
    end for;
    return true;
end function;


function ReduceInitialByAffineP(initial,impossiblek)
    for i in [1..#impossiblek] do
        if #initial ge #impossiblek[i] then 
            for j in [0..n-1] do 
                seq:=[Field[initial[l]]+(Field[(impossiblek[i])[l]])^2^j:l in [1..#impossiblek[i]]];
                if seq eq [seq[1]:i in [1..#seq]] then
                    return #impossiblek[i];
                end if;
            end for;
        end if;
    end for;
    return 0;
end function;


  function ReduceInitialBySubset(initial,impossiblek)
        pos:=0;
        for i in [1..#impossiblek] do
            if SetToMultiset(impossiblek[i]) subset SetToMultiset(initial) then
                change:=SetToIndexedSet(Set(impossiblek[i]) meet Set(initial[5..#initial]));
                pos:=Position(initial,change[1]);
                break;
            end if;
        end for; 
        return pos;
  end function;


function TestZeroInitial(inputinitial)
    repeat
        j:=Position(inputinitial,0)-1;
        inputinitial:=inputinitial[1..j];
        inputinitial[j]-:=1;
    until &*inputinitial ne 0;
    return inputinitial;
end function;


function ReduceSet(impossiblek)
    reducedset:={@  @};
    flag:=[0:i in [1..#impossiblek]];
    for j in [1..#impossiblek] do   
        if flag[j] eq 0 then 
            for i in [j+1..#impossiblek] do  
                if ReduceInitialByAffineP(impossiblek[j],{@ impossiblek[i] @}) ne 0 then
                    flag[i]:=[1];
                end if;
            end for;
            Include(~reducedset,impossiblek[j]);
        end if; 
    end for;
    return reducedset;
end function;

function testdifferential(vectorvalues)
    
    x:=[];
    for i in [1..#vectorvalues] do
        x cat:=IntegerToSequence(i,2,n);
    end for;
    xGraph:=Matrix(#vectorvalues,n,x);
    for i in [0..#vectorvalues-1] do
        differentialset:={* vectorvalues[i+1]*};
        for j in [0..i-1] cat [i+1..#vectorvalues-1] do
            exp:=xGraph[i+1]+xGraph[j+1];exponent:=0;
            for m in [1..n] do
                if exp[m] eq 1 then
                    exponent+:=2^m;
                end if;
            end for;
            if exponent le (#vectorvalues-1) then
                if v^(vectorvalues[j+1]-1) eq v^(vectorvalues[exponent+1]-1) then
                    Include(~differentialset,1);
                else
                    Include(~differentialset,Log(v^(vectorvalues[j+1]-1)+v^(vectorvalues[exponent+1]-1))+1);
                end if;
            end if;
            if Max(Multiplicities(differentialset)) ge 3 then
                return false;
            end if;
        end for;
    end for;
    return true;
end function;

function ReduceImpossibleByDDT(inputimpossible)
    differentialflag:=[];
    presize:=#inputimpossible;
    for i in [1..presize] do
        for j in [1..#inputimpossible[i]] do
            if (testdifferential(inputimpossible[i]) eq false) and testdifferential((inputimpossible[i])[1..#inputimpossible[i]-j]) then
                Include(~inputimpossible,(inputimpossible[i])[1..#inputimpossible[i]-j]);
                Append(~differentialflag,i);
                break;
            end if;
        end for;
    end for;
    return inputimpossible diff {@ inputimpossible[i]:i in differentialflag @};
end function;

function ReduceInitialByDDT(inputinitial)
    if testdifferential(inputinitial) eq false then
        flag:=#inputinitial;
        for i in [1..flag] do
            if testdifferential(inputinitial[1..flag-i]) then
                return i;
            end if;
        end for;
    else return 0;
    end if;
end function;

repeat
    while ReduceInitialByDDT(initial) ge 1 do
        Include(~impossiblek,initial);
        initial:=initial[1..#initial+1-ReduceInitialByDDT(initial)];
        j:=#initial;
        initial[j]-:=1;
        M:=M[1..(j-1)*2*n];
        if &*initial eq 0 then//test whether there are some zeros elements in initial vector;
            initial:=TestZeroInitial(initial);
            M:=M[1..(#initial-1)*2*n];
            j:=#initial;
            impossible:=initial;
            impossible[#impossible]+:=1;
            Include(~impossiblek,impossible);
        end if;
    end while;

    if initial[j] eq 1 then 
            M cat:=IntegerToSequence(j,2,n) cat [0:i in [1..n]];// Eltseq(0) will throw an error, so use this method to add the matrix value;
        else
            M cat:=IntegerToSequence(j,2,n) cat Eltseq(v^(initial[j]-1));
    end if;

    while IsLessDegreeTwo(M) eq false do
        initial[j]-:=1;
        M:=M[1..(j-1)*2*n];
        if &*initial eq 0 then//test whether there are some zeros elements in initial vector;
            initial:=TestZeroInitial(initial);
            M:=M[1..(#initial-1)*2*n];
            j:=#initial;
        end if;
        M cat:=IntegerToSequence(j,2,n) cat ((initial[j] eq 1) select [0:i in [1..n]] else Eltseq(v^(initial[j]-1)));
    end while;    

    dist:=MinimumDistance(Dual(LinearCode(Transpose(Matrix(j,2*n,M)))));// testify the differential uniformity by code theory;

    failflag:=0;
    if dist ge 5 then 
    // if dist>=5, then this matrix value is confirmed and look the deeper one;
        printf "Matrix colomum is %3o\n", j;
        j+:=1;//succeed in initial[j], so the next is initial[j+1]  
        initial;
        A:=Open("results2.txt","w");
        for i in [1..#initial] do
            fprintf A,"%-2o,",initial[i];
        end for;delete A;   
 
        initial cat:=[2^n];
    else 
    // if not, the initial is excluded and the initial can be used to avoid some initial which contains the original initial;
        Include(~impossiblek,initial);
        if failflag ge 100 then
            impossiblek:=ReduceSet(impossiblek);
            impossiblek:=ReduceImpossibleByDDT(impossiblek);
        end if;
        initial[#initial]-:=1;//fail in initial[j], so change the value of initial[j] to restart
        M:=M[1..(#initial-1)*2*n];
        if &*initial eq 0 then//test whether there are some zeros elements in initial vector;
            initial:=TestZeroInitial(initial);
            M:=M[1..(#initial-1)*2*n];
            impossible:=initial;
            impossible[#impossible]+:=1;
            Include(~impossiblek,impossible);
        end if;
        

        pos:=ReduceInitialByAffineP(initial,impossiblek);
        if pos ne 0 then 
            initial[pos]-:=1;
            if initial[pos] eq 0 and pos le 4 then
                printf "no APN function in ", initial;
                break;
            //test whether there are some zeros elements in initial vector;
            elif initial[pos] eq 0 and pos ge 5 then 
                initial:=initial[1..pos-1];
                M:=M[1..(#initial-1)*2*n];
                j:=#initial;
                impossible:=initial;
                impossible[#impossible]+:=1;
                Include(~impossiblek,impossible);
            else
                if pos ne #initial then 
                    if initial[pos] eq 1 then 
                        for i in [1..n] do
                            M[(pos-1)*2*n+n+i]:=[0];
                        end for;
                    else 
                        for i in [1..n] do
                            M[(pos-1)*2*n+n+i]:=Eltseq(v^(initial[pos]-1))[i];
                        end for;
                    end if;
                end if;
            end if;
        end if; 
    j:=#initial;
    end if;
until (initial[1] eq 0) or (j eq 2^n);





//get the graph of F(x), [x,F(x)]
graph:=Matrix(2^n,2*n,[0:i in [1..2*n]] cat M);

value:= Matrix(2^n,n,[graph[i][j]:j in [n+1..2*n],i in [1..2^n]]);
domain:=Matrix(2^n,n,[graph[i][j]:j in [1..n],i in [1..2^n]]);

//DU calculator
Seq:=[];
for a in [domain[i]:i in [2..2^n]] do
    Differential:=[];
    for x in [domain[i]:i in [1..2^n]] do
        //Differential[Position(domain,x)]:=value[Position(F,x)]+value[Position(F,a+x)];
        different:=a+x;
        for i in [1..2^n] do
            if domain[i] eq x then
                for j in [1..2^n] do
                    if domain[j] eq different then
                        Differential[i]:=value[i]+value[j];
                    end if;
                end for;
            end if;
        end for;
    end for;
    Uniformity:=Multiplicities(SequenceToMultiset(Differential));
    Seq:=Seq cat Uniformity;
end for;
C:=Max(Seq);
if C eq 2 then
    value;
end if;
C;



Sbox in AES vectorial form 
n:=8;
F<v>:=FiniteField(2^n);
Fstar:={v^i:i in [0..2^n-2]};
P<x>:=PolynomialRing(GF(2));
Z:=IntegerRing();
value:=[0,0,0,0,0,0,0,0];
for f in Fstar do
value:=value cat Eltseq(f^(-1));
end for;
domain:=Matrix(2^n,n,[graph[i][j]:j in [1..n],i in [1..2^n]]);
value:=Matrix(256,8,value);


*/


//[ 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 255, 255, 255, 255, 254, 254, 254, 254, 253,254, 253, 252, 251, 252, 251, 253, 252, 251, 252, 250, 249, 250, 252, 251, 253, 249, 253, 247, 248, 248, 247, 248, 249, 246, 249, 250, 248, 245, 246, 249, 244, 250, 247, 243, 244, 248, 239, 241, 242, 242, 250, 245, 245, 246, 243, 239, 241, 238, 237, 233, 236, 228, 235, 236, 230, 237, 241, 238, 235, 239, 229, 227, 223, 242, 237, 221, 231, 232, 240, 221, 243, 224, 226, 219, 214, 235, 215, 225, 211, 209, 155, 148, 187, 195, 208, 6, 130, 151, 129, 217, 79, 41, 223, 31 ]


//[ 64, 64, 64, 64, 64, 64, 64, 64, 64, 63, 63, 62, 62, 63, 61, 62, 60, 59, 59, 60, 61, 58, 61, 59, 58, 57, 56, 55, 50, 46, 46, 11, 26, 13, 39, 12, 16, 15, 2 ]; initialValue=[v^9, v^32, v^17, v^44];

//[ 64, 64, 64, 64, 64, 64, 64, 64, 64, 63, 63, 62, 62, 63, 61, 62, 60, 58, 57, 60, 61, 59, 61, 57, 59, 60, 55, 53, 46, 20, 20, 37, 5, 54, 18, 27, 34, 59 ] v^42, v^53, v^44, v^6

//k:=[ 64, 64, 64, 64, 64, 64, 64, 64, 64, 63, 63, 62, 62, 63, 61, 62, 60, 59, 59, 60, 61, 58, 61, 59, 58, 57, 56, 55, 53, 7, 4, 15, 26, 7, 25 ]; initialValue:=[ v^9, v^32, v^17, v^44 ];

//[0, 1, 1, 1, 1, 32, 32, 32, 31, 64, 63, 62, 64, 63, 63, 64, 62, 62, 61, 58];

//initial:=[ 54, 64, 64, 64, 64, 64, 64, 64, 64, 43, 43, 64, 64, 58, 63, 54, 52, 60, 63, 60, 48];
//[ 32, 32, 32, 32, 32, 64, 64, 64, 64, 10, 32, 64, 62, 63, 31, 62, 64, 61, 61, 60, 62 ]
