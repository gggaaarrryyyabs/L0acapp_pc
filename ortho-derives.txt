//must be quadratic APN
// magma code 
function Ortho_Derivative(Function,n)
    F<v>:=FiniteField(2,n);
    W:=VectorSpace(GF(2),n);
    ortho:=[];
    for a in F do
        // a don't equal 0
        if a eq 0 then continue; end if;
        linearspace:=[];
        for x in F do
            linearspace cat:=(Function(x)+Function(x+a)+Function(0)+Function(a) eq 0) select [0:i in [1..n]] else Eltseq(Function(x)+Function(x+a)+Function(0)+Function(a));
        end for;
        ortho cat:=Basis(NullspaceOfTranspose(Matrix(GF(2),2^n,n,linearspace)));
    end for;
    functionG:=[&+[ortho[index][i]*v^(i-1):i in [1..n]]:index in [1..2^n-1]];
    function G(x)
        return (x eq F!0) select F!0 else functionG[Log(x)+1]; 
    end function;
    return G;
end function;


G:=Ortho_Derivative(func<x|x^3>,n);

n:=9;
F<v>:=GF(2,n);
f:=func<x|x^3+x^10+v^219*x^136>;
for a in F do 
    if a eq 0 then continue; end if;
    [&+[Eltseq(G(a))[i]*Eltseq(f(a)+f(x)+f(x+a)+f(0))[i]:i in [1..n]]:x in F];
end for;



Mset:={* *};
for a,b in F do
    count:=0;
    for x in F do
        if S(x)+S(x+a) eq b then
            count+:=1;
        end if;
    end for;
    Include(~Mset,count);
end for;

    {*#{x in F|G(x)+G(x+a) eq b}:a,b in F*};


S:=Ortho_Derivative(func<x|x^5>,n);
load "DifferentialUniformityExe.m";
ddtG:=DDTexe(G,n); 
ddtS:=DDTexe(S,n);
if Ncols(ddtG) ne Ncols(ddtS) then
    false;
else
    IsZero(ddtG-ddtS);
end if;



function AffineEq(function1,function2,n)
ortho1:=[];
ortho2:=[]; 
F<v>:=FiniteField(2,n);
W:=VectorSpace(GF(2),n);
for a in Fstar do
linearspace1:=[];
linearspace2:=[];
for x in F do
if function1(x)+function1(x+a)+function1(0)+function1(a) eq 0 then 
linearspace1 cat:=[0:i in [1..n]];
else
linearspace1 cat:=Eltseq(function1(x)+function1(x+a)+function1(0)+function1(a));
end if;
if function2(x)+function2(x+a)+function2(0)+function2(a) eq 0 then 
linearspace2 cat:=[0:i in [1..n]];
else
linearspace2 cat:=Eltseq(function2(x)+function2(x+a)+function2(0)+function2(a));
end if;
end for;
ortho1 cat:=Basis(NullspaceOfTranspose(Matrix(GF(2),2^n,n,linearspace1)));
ortho2 cat:=Basis(NullspaceOfTranspose(Matrix(GF(2),2^n,n,linearspace2)));
end for;
ortho1 cat:=[2*ortho1[1]];
ortho2 cat:=[2*ortho2[1]];

Seq:=[];
domain:=[W!Eltseq(f):f in F];
for a in [domain[i]:i in [1..2^n-1]] do
Differential1:=[];
Differential2:=[];
i:=1;
for x in [domain[j]:j in [1..2^n]] do
different:=a+x;
for j in [1..2^n] do
if domain[j] eq different then
Differential1[i]:=ortho1[i]+ortho1[j];
Differential2[i]:=ortho2[i]+ortho2[j];
break;
end if;
end for;
i+:=1;
end for;
if Multiplicities(SequenceToMultiset(Differential1)) ne Multiplicities(SequenceToMultiset(Differential2)) then
return false;
end if; 
end for;
return true;
end function;



Solution(Transpose(Matrix(GF(2),256,8,linearspace)),Matrix(GF(2),1,256,[0:i in [1..256]]));
b:=Seqelt(Basis(NullspaceOfTranspose(Matrix(GF(2),256,8,linearspace))));

Solution(Transpose(Matrix(GF(2),2,2,[1,0,0,1])),Matrix(GF(2),1,2,[0,0]));

//to test affine equivalent
//



orth:=[];
for a in Fstar do
i:=1;
linearSpace:=[Function(x)+Function(x+a)+Function(0)+Function(a):x in F];
//M:=Matrix(GF(2),256,8,linearspace);
//ortho:=ortho cat Basis(NullspaceOfTranspose(Matrix(GF(2),256,8,linearspace)));
i:=i+1;
end for;

Solution(Transpose(Matrix(GF(2),256,8,linearspace)),Matrix(GF(2),1,256,[0:i in [1..256]]));
b:=Basis(NullspaceOfTranspose(Matrix(GF(2),256,8,linearspace)));


==========================================================

function DiffSpecOd(PolynomialF,variables)
    n:=variables; 
    p:=2; 
    F<w>:=GF(p,n); 
    Z:=IntegerRing();
    S1:=func<x|x>; 
    input := [&+[Z!Eltseq(x)[j]*2^(j-1) : j in [1.. n]]:x in F];
    output:=[&+[Z!Eltseq(PolynomialF(x))[j]*2^(j-1):j in [1.. n]]:x in F];
    for i in [1..2^n] do
        Sbox[input+1]:=output;
    end for;
    //Output TTInt to sbox.txt and run DFSboxCpp.exe 
    A:=Open("Sbox_DiffSpec_OD.txt","w");
    for i in [1..2^n] do
        fprintf A, "%d, ", Sbox[i]; 
    end for;
    delete A;

    System("tempCodeRunnerFile.exe");
    B:=Open("Sbox_DSOD.txt","r");

    c := 0;
    while true do
        s := Gets(DDT);
        if IsEof(s) then break;end if;
        c +:= 1;
    end while;

    //c; //c is the number of the lines
    DDM:= [Z| 0:i in [1.. 2*(c)]];
    DDT := Open("Sbox_DSOD.txt ", "r");
    for i:= 1 to c by 1 do
    s := Gets(DDT);
    num:=Split(s, ",");
    DDM[i]:= StringToInteger(num[1]); DDM[c+i]:= StringToInteger(num[2]);
    end for; // DDM is the differential spectrum
    return DDM;
end function;
