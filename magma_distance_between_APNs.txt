//K:=6; U being generated by {1, β , β^4, β^21}, 
//which means the exponents are in {0,4,1,21,56,35,42,14,58,43,16,25,37,22,46}
n:=6;
F<v>:=FiniteField(2,n);
Fstar:={v^i:i in [0..2^n-2]};
F:={f:f in F};
zero:=F diff Fstar;
P<x>:=PolynomialRing(GF(2));
Z:=IntegerRing();
f:=func<x|x^3>;
U:={v^i:i in {0,4,1,21,56,35,42,14,58,43,16,25,37,22,46}};
U:=U join zero;
for u in U do
D:=Fstar;
for a in Fstar do
audomain:=F diff U;
xnotdomain:=U join {a+u:u in U};
xdomain:=F diff xnotdomain;
if a+u in audomain then
A:={f(u)+f(u+a)+f(x)+f(x+a):x in xdomain};
D:=D diff A;
end if;
end for;
D;
end for;
U:=U diff {v^35};
f:=func<x|x^3+v^35*(1+(x+v^35)^(2^n-1))>;
for u in U do
DD:=D;
for a in Fstar do
audomain:=F diff U;
xnotdomain:=U join {a+u:u in U};
xdomain:=F diff xnotdomain;
if a+u in audomain then
A:={f(u)+f(u+a)+f(x)+f(x+a):x in xdomain};
DD:=DD diff A;
end if;
end for;
DD;
end for;
U:=U diff {v^4};
f:=func<x|x^3+v^35*(1+(x+v^35)^(2^n-1))+v^35*(1+(x+v^4)^(2^n-1))>;
for u in U do
DDD:=Fstar;
for a in Fstar do
audomain:=F diff U;
xnotdomain:=U join {a+u:u in U};
xdomain:=F diff xnotdomain;
if a+u in audomain then
A:={f(u)+f(u+a)+f(x)+f(x+a):x in xdomain};
DDD:=DDD diff A;
end if;
end for;
DDD;
end for;



// given a vectorial Boolean function in univariate form in F_{2^n}, returns its gamma-rank 
function gammaRank(f,m)
    //R:=Parent(f);
    Z:=Integers();
    Fn:=FiniteField(2,m);
    n:=2*m;
    M:=ScalarMatrix(GF(2),2^n,0);
    W:=VectorSpace(GF(2),n);
    Gf:={W!(Eltseq(v) cat Eltseq(Evaluate(f,v))): v in Fn};
    for w in W do
        ww:=[Z!w[i]:i in [1..n]];
        j:=SequenceToInteger(ww,2)+1;
        GFtilde:={r+w:r in Gf};
        for v in GFtilde do
            vv:=[Z!v[i]:i in [1..n]];
            i:=SequenceToInteger(vv,2)+1;
            M[i][j]:=1;
        end for;
    end for;
    return Rank(M);
end function;

























//differential uniformity  of polynomial A with bivariate
function BDU(A,numbervariables)
n:=numbervariables;
F<a>:=FiniteField(2,n);
Fsub<w>:=FiniteField(2,n div 2);
Z:=IntegerRing();
Fstar:=[a^i:i in [0..#F-2]];
Fsubstar:=[w^i:i in [0..#Fsub-2]];
//Fstar:=F diff {0};
M:=[];
for u in Fsubstar do
for v in Fsubstar do
Differential:=[A(x,y)+A(x+u,y+v):x in Fsub,y in Fsub];
Uniformity:=Multiplicities(SequenceToMultiset(Differential));
M:=M cat Uniformity;
end for;
return Max(M);
end function;

//differential uniformity of sbox
function SBOXDU(A)
Z:=IntegerRing(16);
du:=Matrix(IntegerRing(),15,1,[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);
M:=[];
for i in [1..#A-1] do
differential:=[A[k]+A[(k+i mod 16)+1] mod 16: k in [1..#A]];
Uniformity:=Multiplicities(SequenceToMultiset(differential));
M:=M cat Uniformity;
end for;
return Max(M);
end function;

SBOXDU([0..15]);



\[a_0=\begin{pmatrix}
        x_0\\x_1\\x_2\\x_3
    \end{pmatrix},a_1=\begin{pmatrix}
        y_0\\y_1\\y_2\\y_3
    \end{pmatrix},
    T_1=x+y=\begin{pmatrix}
        x_0+y_0\\x_1+y_1\\x_2+y_2\\x_3+y_3
    \end{pmatrix}. \]
    \[ T_2=\begin{pmatrix}
        x_1+y_1+x_3+y_3\\x_0+y_0+x_2+y_2\\x_0+y_0+x_1+y_1\\x_1+y_1
    \end{pmatrix}.\]
    \[T_3=\begin{pmatrix}
        (x_1 +x_2)(y_1+y_2) +(x_0+x_2)(y_0+y_2) +(x_2 +x_3)(y_2+y_3) +(x_0 +x_3)(y_0 +y_3) +x_0 y_0\\
        (x_1 +x_3)(y_1+y_3) +(x_0+x_2)(y_0+y_2) +(x_0 +x_1)(y_0+y_1) + x_1  y_1\\
        (x_0 +x_3)(y_0+y_3) +(x_0+x_2)(y_0+y_2) +(x_0 +x_1)(y_0+y_1) +(x_1 +x_2)(y_1 +y_2) +x_2 y_2\\
        (x_1 +x_3)(y_1+y_3) +(x_0+x_2)(y_0+y_2) +(x_2 +x_3)(y_2+y_3) + x_3  y_3
    \end{pmatrix}\]



    

T5(0)=x0 + 2*x1 + y0 + 2*y1 + (x0 + x1)*(y0 + y1) + 2*(x0 + x2)*(y0 + y2) + (x0 + x3)*(y0 + y3) + (x1 + x2)*(y1 + y2) + (x1 + x3)*(y1 + y3) + (x2 + x3)*(y2 + y3) + x2*y2 + x3*y3 + (x0 + x2 + y0 + y2 + (x0 + x1)*(y0 + y1) + (x0 + x2)*(y0 + y2) + (x1 + x3)*(y1 + y3) + x1*y1)*(x0 + x1 + y0 + y1 + (x0 + x1)*(y0 + y1) + (x0 + x2)*(y0 + y2) + (x0 + x3)*(y0 + y3) + (x1 + x2)*(y1 + y2) + x2*y2) + (x0 + x1 + y0 + y1 + (x0 + x1)*(y0 + y1) + (x0 + x2)*(y0 + y2) + (x0 + x3)*(y0 + y3) + (x1 + x2)*(y1 + y2) + x2*y2)*(x1 + x3 + y1 + y3 + (x0 + x2)*(y0 + y2) + (x0 + x3)*(y0 + y3) + (x1 + x2)*(y1 + y2) + (x2 + x3)*(y2 + y3) + x0*y0) + (x1 + y1 + (x0 + x2)*(y0 + y2) + (x1 + x3)*(y1 + y3) + (x2 + x3)*(y2 + y3) + x3*y3)*(x0 + x2 + y0 + y2 + (x0 + x1)*(y0 + y1) + (x0 + x2)*(y0 + y2) + (x1 + x3)*(y1 + y3) + x1*y1)*(x0 + x1 + y0 + y1 + (x0 + x1)*(y0 + y1) + (x0 + x2)*(y0 + y2) + (x0 + x3)*(y0 + y3) + (x1 + x2)*(y1 + y2) + x2*y2)



T5(1)=
x0*x1*x2*y0*y1*y2 + x0*x1*x2*y0*y2*y3 + x0*x1*x2*y0*y2 + x0*x1*x2*y1*y2 + x0*x1*x2*y1*y3 + x0*x1*x2*y2 + x0*x1*x2*y3 + x0*x1*x3*y0*y1*y3 + x0*x1*x3*y0*y1 + x0*x1*x3*y0*y3 + x0*x1*x3*y0 + x0*x1*x3*y1*y2*y3 + x0*x1*x3*y1*y2 + x0*x1*x3*y1+ x0*x1*x3*y2 + x0*x1*x3 + x0*x1*y0*y1*y3 + x0*x1*y0*y2*y3 + x0*x1*y0*y2 + x0*x1*y0*y3 + x0*x1*y1*y2*y3 + x0*x1*y1*y3 + x0*x2*x3*y0*y1*y2 + x0*x2*x3*y0*y1 + x0*x2*x3*y0*y2*y3 + x0*x2*x3*y0*y3 + x0*x2*x3*y1*y2*y3 + x0*x2*x3*y1*y2 + x0*x2*x3*y1*y3 + x0*x2*x3*y2 + x0*x2*x3*y3 + x0*x2*y0*y1*y2 + x0*x2*y0*y1 + x0*x2*y0*y2 + x0*x2*y0 + x0*x2*y1*y2*y3 + x0*x2*y1 + x0*x2*y2*y3 + x0*x2 + x0*x3*y0*y1*y3 + x0*x3*y0*y1 + x0*x3*y0*y2*y3 + x0*x3*y1*y2 + x0*x3*y1*y3 + x0*x3*y1 + x0*x3*y2 + x0*x3*y3 + x0*x3 + x0*y0*y1*y3 + x0*y0*y2 + x0*y0 + x0*y1*y3 + x0*y1 + x0*y2 + x0*y3 + x0 + x1*x2*x3*y0*y1*y3 + x1*x2*x3*y0*y1 + x1*x2*x3*y0*y2*y3 + x1*x2*x3*y0*y2 + x1*x2*x3*y1*y2 + x1*x2*x3*y1 + x1*x2*x3*y2*y3 + x1*x2*x3*y3 + x1*x2*y0*y1*y2 + x1*x2*y0*y1*y3 + x1*x2*y0*y2*y3 + x1*x2*y0*y3 + x1*x2*y1*y2*y3 + x1*x2*y1*y2 + x1*x2*y2*y3 + x1*x2*y2 + x1*x3*y0*y1*y2 + x1*x3*y0*y1 +  x1*x3*y0*y2*y3 + x1*x3*y0*y3 + x1*x3*y0 + x1*x3*y3 + x1*y0*y1*y3 + x1*y0*y2 + x1*y0*y3 + x1*y0 + x1*y1*y2*y3 + x1*y2 + x1 + x2*x3*y0*y2 + x2*x3*y1*y2*y3 + x2*x3*y1*y2 + x2*x3*y2 + x2*y0*y1*y2 + x2*y0*y1*y3 + x2*y0*y2*y3 + x2*y0*y3 + x2*y0 + x2*y1*y2 + x2*y1 + x2*y2*y3 + x3*y0*y1*y2 + x3*y0*y2*y3 + x3*y0*y3 + x3*y0 + x3*y1*y2*y3 + x3*y1*y3 + x3*y3 + y0*y1*y3 + y0*y2 + y0*y3 + y0 + y1


T5(2)=
x0*x1*x2*y0*y1*y2 + x0*x1*x2*y1*y2*y3 + x0*x1*x2*y1*y3 + x0*x1*x3*y0*y1*y3 + x0*x1*x3*y0*y1 + x0*x1*x3*y0*y2*y3 + x0*x1*x3*y0*y2 + x0*x1*x3*y0*y3 + x0*x1*x3*y0 + x0*x1*x3*y1*y2*y3 + x0*x1*x3*y1*y3 + x0*x1*x3*y1 + x0*x1*x3*y2*y3 +  x0*x1*x3*y2 + x0*x1*x3*y3 + x0*x1*x3 + x0*x1*y0*y1*y3 + x0*x1*y0*y2*y3 + x0*x1*y0*y3 + x0*x1*y1*y2 + x0*x1*y1*y3 +  x0*x1*y3 + x0*x2*x3*y0*y1*y3 + x0*x2*x3*y0*y1 + x0*x2*x3*y1*y2*y3 + x0*x2*y0*y1*y3 + x0*x2*y0*y2 + x0*x2*y0*y3 + x0*x2*y1*y2*y3 + x0*x2*y1*y2 + x0*x2*y1*y3 + x0*x2*y2 + x0*x2*y3 + x0*x3*y0*y1*y3 + x0*x3*y0*y1 + x0*x3*y0*y2 +  x0*x3*y1*y2*y3 + x0*x3*y1*y3 + x0*x3*y1 + x0*x3*y2 + x0*x3*y3 + x0*x3 + x0*y0*y1*y3 + x0*y0 + x0*y1*y2*y3 + x0*y1*y2  + x0*y1*y3 + x0*y1 + x0*y2*y3 + x0*y3 + x0 + x1*x2*x3*y0*y1*y2 + x1*x2*x3*y0*y1*y3 + x1*x2*x3*y0*y2*y3 +   x1*x2*x3*y0*y2 + x1*x2*x3*y0*y3 + x1*x2*x3*y0 + x1*x2*x3*y1*y2*y3 + x1*x2*x3*y1*y3 + x1*x2*x3*y2*y3 + x1*x2*x3*y2 + x1*x2*x3*y3 + x1*x2*x3 + x1*x2*y0*y1 + x1*x2*y0*y2 + x1*x2*y0 + x1*x2*y1*y2 + x1*x2*y1*y3 + x1*x2*y1 + x1*x2*y2 + x1*x2*y3 + x1*x2 + x1*x3*y0*y1*y2 + x1*x3*y0*y1*y3 + x1*x3*y0*y1 + x1*x3*y0*y2 + x1*x3*y0*y3 + x1*x3*y0 +  x1*x3*y1*y2*y3 + x1*x3*y1*y2 + x1*x3*y1*y3 + x1*x3*y2*y3 + x1*x3*y3 + x1*y0*y1*y3 + x1*y0*y3 + x1*y0 + x1*y1*y2 + x1*y2 + x1*y3 + x1 + x2*x3*y0*y1*y3 + x2*x3*y0 + x2*x3*y1*y2*y3 + x2*x3*y1*y3 + x2*x3*y3 + x2*y0*y1*y3 + x2*y0*y2 + x2*y0*y3 + x2*y1*y2*y3 + x2*y1*y2 + x2*y1 + x2*y2 + x2*y3 + x2 + x3*y0*y1*y3 + x3*y0*y1 + x3*y0*y2 + x3*y0*y3 + x3*y0 + x3*y1*y2*y3 + x3*y1*y2 + x3*y1*y3 + x3*y1 + x3*y2*y3 + x3*y2 + x3*y3 + x3 + y0*y1*y3 + y0*y3 + y0 + y1*y2*y3+ y1*y2 + y1 + y2 + y3

T5(3)=
x0*x1*x2*y0*y1*y2 + x0*x1*x2*y0*y1*y3 + x0*x1*x2*y0*y1 + x0*x1*x2*y0*y2*y3 + x0*x1*x2*y0*y2 + x0*x1*x2*y0 + x0*x1*x2*y1*y2 + x0*x1*x2*y1 + x0*x1*x2*y2*y3 + x0*x1*x2*y2 + x0*x1*x2*y3 + x0*x1*x2 + x0*x1*x3*y0*y1*y2 + x0*x1*x3*y0*y1 + x0*x1*x3*y0 + x0*x1*x3*y1*y2*y3 + x0*x1*x3*y1*y3 + x0*x1*x3*y1 + x0*x1*x3*y2*y3 + x0*x1*x3*y2 + x0*x1*x3*y3 + x0*x1*x3 + x0*x1*y0*y1*y2 + x0*x1*y0*y1*y3 + x0*x1*y0*y2 + x0*x1*y1*y2*y3 + x0*x1*y1*y2 + x0*x1*y1*y3 + x0*x1*y2 + x0*x1*y3 + x0*x2*x3*y0*y1*y2 + x0*x2*x3*y0*y2*y3 + x0*x2*x3*y0*y2 + x0*x2*x3*y1*y2 + x0*x2*x3*y1*y3 + x0*x2*x3*y1 + x0*x2*x3*y2*y3 + x0*x2*x3*y2 + x0*x2*x3*y3 + x0*x2*x3 + x0*x2*y0*y1*y2 + x0*x2*y0*y1 + x0*x2*y0*y2*y3 + x0*x2*y0*y2 + x0*x2*y0*y3 + x0*x2*y1*y2*y3 + x0*x2*y1*y2 + x0*x2*y1*y3 + x0*x2*y2*y3 + x0*x2*y2 + x0*x3*y0*y2 + x0*x3*y0*y3 + x0*x3*y0 + x0*x3*y1*y2*y3 + x0*x3*y1*y2 + x0*x3*y1*y3 + x0*x3*y2 + x0*x3*y3 + x0*y0*y1*y2 + x0*y0*y1*y3 + x0*y0*y3 + x0*y1*y3 + x0*y1 + x0*y2 + x0 + x1*x2*x3*y0*y1*y3 + x1*x2*x3*y0*y1 + x1*x2*x3*y0*y2 + x1*x2*x3*y0*y3 + x1*x2*x3*y1*y2*y3 + x1*x2*x3*y1*y3 + x1*x2*x3*y2*y3 + x1*x2*x3*y2 + x1*x2*x3*y3 + x1*x2*x3 +  x1*x2*y0*y1*y2 + x1*x2*y0*y1 + x1*x2*y0*y2*y3 + x1*x2*y0*y2 + x1*x2*y0*y3 + x1*x2*y1*y3 + x1*x2*y1 + x1*x2*y2 + x1*x2*y3 + x1*x3*y0*y1*y3 + x1*x3*y0*y1 + x1*x3*y0*y2*y3 + x1*x3*y0*y2 + x1*x3*y0*y3 + x1*x3*y0 + x1*x3*y1*y2*y3 + x1*x3*y1*y2 + x1*x3*y2*y3 + x1*y0*y1*y2 + x1*y0*y1*y3 + x1*y0*y2*y3 + x1*y0 + x1*y1*y2 + x1*y1 + x1*y2*y3 + x1*y2 + x1*y3 + x2*x3*y0*y1*y2 + x2*x3*y0*y1*y3 + x2*x3*y0*y2*y3 + x2*x3*y0*y2 + x2*x3*y1*y2*y3 + x2*x3*y1*y3 + x2*x3*y1 + x2*x3*y2 + x2*x3*y3 + x2*y0*y1*y2 + x2*y0*y1*y3 + x2*y0*y1 + x2*y0*y2*y3 + x2*y0*y2 + x2*y0*y3 + x2*y0 + x2*y1*y2*y3 + x2*y1*y2 + x2*y1 + x2*y2*y3 + x2*y2 + x2*y3 + x2 + x3*y0*y1*y2 + x3*y0*y1*y3 + x3*y0*y1 + x3*y0*y2*y3 + x3*y0*y3 + x3*y1*y2*y3 + x3*y1*y2 + x3*y1 + x3*y2*y3 + x3*y2 + y0*y1*y2 + y0*y1*y3 + y0*y2*y3 + y0 + y1*y2*y3 + 



U=[0 , 0 , 0 , 0 , 0 , 0 , 0 , 1;
0 , 1 , 1 , 0 , 0 , 0 , 0 , 1;
1 , 1 , 1 , 0 , 0 , 0 , 0 , 1;
1 , 1 , 1 , 0 , 0 , 1 , 1 , 1;
0 , 1 , 1 , 1 , 0 , 0 , 0 , 1;
0 , 1 , 1 , 0 , 0 , 0 , 1 , 1;
1 , 0 , 0 , 1 , 1 , 0 , 1 , 1;
0 , 1 , 0 , 0 , 1 , 1 , 1 , 1;
1 , 0 , 0 , 0 , 0 , 1 , 0 , 0;
1 , 0 , 0 , 1 , 0 , 0 , 0 , 0;
1 , 1 , 1 , 1 , 1 , 0 , 1 , 0;
0 , 1 , 0 , 0 , 1 , 1 , 1 , 0;
1 , 0 , 0 , 1 , 0 , 1 , 1 , 0;
1 , 0 , 0 , 0 , 0 , 0 , 1 , 0;
0 , 0 , 0 , 1 , 0 , 1 , 0 , 0;
1 , 0 , 0 , 1 , 1 , 0 , 1 , 0;
0 , 0 , 1 , 0 , 1 , 1 , 1 , 0;
1 , 0 , 1 , 1 , 0 , 1 , 0 , 0;
1 , 0 , 1 , 0 , 1 , 1 , 1 , 0;
0 , 1 , 1 , 1 , 1 , 1 , 1 , 0;
1 , 1 , 0 , 1 , 1 , 1 , 1 , 0;
1 , 0 , 1 , 0 , 1 , 1 , 0 , 0]


B=[0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 1 , 0;
1 , 1 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 1 , 0;
1 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 1;
1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 1 , 0;
0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 1 , 0;
1 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 0;
0 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0;
1 , 0 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0]